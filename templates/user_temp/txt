from asyncio.windows_events import NULL
import datetime
from distutils.command.clean import clean
from http import client
import os
import json
from platform import uname
from unicodedata import category

from django.shortcuts import render, redirect
from django.contrib import messages
from .models import *
from admin_app.models import *
from cart.models import *
from django.views.decorators.cache import never_cache
import random
from twilio.rest import Client
from django.core.paginator import Paginator, EmptyPage
import vonage
from django.db.models import Sum,Count
from django.template.loader import render_to_string
import sweetify
import razorpay


# Create your views here.


def user_sign(request):
    if request.method == 'POST':
        name = request.POST['uname']
        mobile = request.POST['mobile']
        email = request.POST['email']
        psw = request.POST['psw']
        re_psw = request.POST['re_psw']
        usign = UserSignUp.objects.create(name=name, number=mobile, email=email, psw=psw, psw1=re_psw, status=True, logstatus=False)
        usign.save()

    return render(request, 'user_temp/user_signup.html')




def otp_verify(re):
    if re.method == 'POST':
        d=re.POST.get('otp')
        t=re.session.get('se')
        client = vonage.Client(key="569ec10a", secret="cepd98rNNZFd4lOn")
        verify = vonage.Verify(client)
        response = verify.check(t, code=d)

        if response["status"] == "0":

            print("Verification successful, event_id is %s" % (response["event_id"]))
            return redirect(product)

        else:
            print("Error: %s" % response["error_text"])
            return redirect(otp_verify)


    return render(re,"user_temp/otp_page_verify.html")

@never_cache
def user_login(request):
    if 'uname' in request.session:
        return redirect(user_home)
    if request.method == 'POST':
        uname = request.POST['uname']
        psw = request.POST['psw']
        user_log = UserSignUp.objects.filter(email=uname, psw=psw)

        if user_log:
            block_user_data = UserSignUp.objects.get(email=uname)

            if block_user_data.status is True:
                if user_log:
                    request.session['uname'] = uname

                    return redirect(user_home)
            else:
                messages.info(request,'error')

    return render(request, 'user_temp/user_login.html')


def otp_log(r):
    if r.method == 'POST':
        client = vonage.Client(key="569ec10a", secret="cepd98rNNZFd4lOn")
        verify = vonage.Verify(client)
        response = verify.start_verification(number="916282787327", brand="AcmeInc")
        r.session['se'] = response['request_id']

        if response["status"] == "0":
            print("Started verification request_id is %s" % (response["request_id"]))
            return redirect('otp_log_verify')

        else:
            print("Error: %s" % response["error_text"])
            return redirect(otp_log)


    return render(r,"user_temp/otp_page.html")


@never_cache
def user_home(request):
    if 'uname' in request.session:
        data = request.session['uname']
        block_user_data = UserSignUp.objects.get(email=data)
        user = UserSignUp.objects.get(email=data)
        category = Category.objects.all()
        cart = Cart_view.objects.filter(uid_id=user.id).count()
        print("cart",cart)
        brand = Brand.objects.all()
        if block_user_data.status is False:
            del request.session['uname']
            return redirect('user_login')
        user.logstatus = True
        user.save()
        print(user.logstatus)
        prod = Product.objects.all()
        p = Paginator(prod, 6)
        page_num = request.GET.get('page', 1)
        try:
            page = p.page(page_num)
        except EmptyPage:
            page = p.page(1)
        context = {
            'items': page,
            'user': user,
            'category': category,
            'brand': brand,
            'cart':cart,
        }
        if request.method == "POST":
            search = request.POST['search']
            if len(search) > 0:
                
                if Product.objects.filter(product_name__icontains=search):
                    prod = Product.objects.filter(product_name__icontains=search)
                    p = Paginator(prod, 2)
                    page_num = request.GET.get('page', 1)
                    try:
                        page = p.page(page_num)
                    except EmptyPage:
                        page = p.page(1)
                    context = {
                        'items': page,
                        'user': user,
                        'category': category,
                        'prod':prod,
                        'brand': brand,
                        'cart':cart,

                        }
                    return render(request, 'store_temp/prod_view_all.html', context)
                elif Product.objects.filter(series__icontains=search):
                    prod = Product.objects.filter(series__icontains=search)
                    p = Paginator(prod, 2)
                    page_num = request.GET.get('page', 1)
                    try:
                        page = p.page(page_num)
                    except EmptyPage:
                        page = p.page(1)
                    context = {
                        'items': page,
                        'user': user,
                        'category': category,
                        'prod':prod,
                        'brand': brand,
                        'cart':cart,
                        }
                    
                    return render(request, 'store_temp/prod_view_all.html', context)

        return render(request, 'store_temp/prod_view_all.html', context)


    else:
        return redirect('user_login')


@never_cache
def logout(request, id):
    if 'uname' in request.session:
        del request.session['uname']
    user = UserSignUp.objects.get(id=id)
    user.logstatus = False
    return redirect('user_login')


def logout_profile(request):
    name = request.session.get('uname')
    user = UserSignUp.objects.get(email=name)
    user.logstatus = False
    if 'uname' in request.session:
        del request.session['uname']

    return redirect('user_login')


def login_otp(request):
    # if request.method=='POST':
        # username = request.POST['username']

    otp = random.randint(1000,9999)
    account_sid = "ACea1db142f98a1e87384255b29ee82e18"
    auth_token = 'a9348108964e344da16c1874447dca33'
    client = Client(account_sid,auth_token)
    msg = client.messages.create(
        body=f"Your OTP is {otp}",
        from_="+16304488428",
        to="+916282787327"
    )
    request.session['otp']=otp
    return render(request, 'login_otp.html')
    #     return redirect(login_home)
    # return render(request, 'login_otp.html')


def product(request):
    prod = Product.objects.all()
    p = Paginator(prod, 1)
    page_num = request.GET.get('page', 1)
    try:
        page = p.page(page_num)
    except EmptyPage:
        page = p.page(1)
    context = {
        'items': page
    }


    return render(request, 'store_temp/prod_view_all.html', context)


def detail_view_user(request, id, uid):
    prod = Product.objects.get(id=id)
    user = UserSignUp.objects.get(id=uid)
    user.logstatus = True
    return render(request, 'store_temp/detail.html', {'prod': prod, 'user':user})


def add_cart(request, id, pid):
    user = UserSignUp.objects.get(id=id)
    prod = Product.objects.get(id=pid)
    cart_check = Cart_view.objects.filter(uid_id=id,pid_id=pid)
    if cart_check:
        print(cart_check)
    else:
        cart = Cart_view()
        cart.qty = 1
        cart.pid_id = prod.id
        cart.uid_id = user.id
        cart.total_price = float(prod.price*cart.qty)
        cart.tot_amt = float(prod.price * cart.qty)
        cart.save()



    return redirect(cart_view)



def add_cart_guest(request):
    pass


def cart_view(request):
    if 'uname' in request.session:
        cart = Cart_view.objects.all().order_by('id')

        user_detail = request.session.get('uname')
        print(user_detail)
        user = UserSignUp.objects.get(email=user_detail)
        user_info = UserSignUp.objects.all()
        # Cart_view.objects.aggregate(Sum('total_price'))

        check = Cart_view.objects.filter(uid_id=user.id)
        print("helo",check)
        print(user.id)
        print(check is NULL)
        print(check)

        car = Cart_view.objects.filter(uid_id=user.id).aggregate(Sum('total_price'))
        return render(request, 'user_temp/cart_page.html', {'cart': check, 'user': user, 'user_info': user_info, 'car': car['total_price__sum']})
    else:
        return redirect(user_login)

def remove_cart(request, id):
    cart1 = Cart_view.objects.get(id=id)
    cart1.delete()
    return redirect(cart_view)

def cart_update(request):
   print('cart')
   body = json.loads(request.body)
   cart = Cart_view.objects.get(id=body['cart_id'])
   cart.qty = body['product_qty']
   cart.total_price = body['total']
   cart.save()
   print("cart_test",body)
   print("update cart")
   return redirect(cart_view)

    

def add_qty(request, id, pid):
    cart = Cart_view.objects.get(id=id)
    prod = Product.objects.get(id=pid)
    cart.qty = cart.qty+1
    cart.total_price = cart.qty*int(prod.price)
    cart.save()
    car = Cart_view.objects.aggregate(Sum('total_price'))
    return redirect(cart_view)


def sub_qty(request, id, pid):
    cart = Cart_view.objects.get(id=id)
    prod = Product.objects.get(id=pid)
    cart.qty = cart.qty-1
    cart.total_price = cart.qty * int(prod.price)
    cart.save()
    car = Cart_view.objects.aggregate(Sum('total_price'))
    return redirect(cart_view)


def profile(request,id):
    user_info = UserSignUp.objects.get(id=id)
    print(user_info.name)
    if request.method == 'POST':

            name = request.POST.get('name')
            email = request.POST.get('email')
            number = request.POST.get('number')
            print(len(number))
            if len(name) == 0 or name.startswith(' '):
                messages.warning(request,'Please enter a valid name')
            if len(number) != 10 :
                messages.warning(request,'Please enter a valid number')
            else:
                user_info.name = name
                user_info.email = email
                user_info.number = number
                user_info.save()
                messages.success(request,'Updated Successfully!!')
    return render(request, 'user_temp/profile/profilebase.html', {'user_info': user_info})

def edit_profile(request, id):
    if 'uname' in request.session:
        user = UserSignUp.objects.get(id=id)
       

       
        return render(request, 'user_temp/profile/profile_Edit.html', {'user': user})
    return redirect(user_login)


def change_psw(request,id):
    if 'uname' in request.session:
        user = UserSignUp.objects.get(id=id)
        if request.method == "POST":

            cur_psw = request.POST.get('cur_psw')
            new_psw = request.POST.get('new_psw')
            con_psw = request.POST.get('con_psw')
            uname = request.session.get('uname')

            print('psw')
            if user.psw == cur_psw:
                if new_psw == con_psw:
                    if user.psw == new_psw:
                        messages.info(request,"Current password and New password are same!!")
                    else:
                        user.psw = new_psw
                        user.psw1 = new_psw
                        user.save()
                else:
                    messages.info(request,"  New Password and Confirm Password are not matching!!")

            else:
                messages.info(request,"Password doesn't matching!!")
        return render(request, 'user_temp/profile/change_psw.html', {'user': user})


def add_wishlist(request,pid,id):
    user = UserSignUp.objects.get(id=id)
    prod = Product.objects.get(id=pid)
    wish = Wish()

    wish.pid_id = prod.id
    wish.uid_id = user.id
    wish.total_price = prod.price
    wish.save()
    return redirect(view_wishlist)


def view_wishlist(request):
    wish = Wish.objects.all()
    user_detail = request.session.get('uname')
    print(user_detail)
    user = UserSignUp.objects.get(email=user_detail)
    user.logstatus = True
    user.save()
    return render(request, 'user_temp/wishlist.html', {'user': user, 'wish': wish})


def remove_wish(request, id):
    wish = Wish.objects.get(id=id)
    wish.delete()
    return redirect(view_wishlist)


def checkout(request, id):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        if Cart_view.objects.filter(uid_id=id):
            user_info = UserSignUp.objects.get(email=uname)
            cart = Cart_view.objects.filter(uid_id=user_info.id)
            if Cart_view.objects.filter(uid_id=id):

                user = UserSignUp.objects.get(id=id)
                amt = Cart_view.objects.filter(uid_id=id).aggregate(Sum('total_price'))


           
            if request.method == 'POST':
                pay_method = request.POST.get('payment')
                print(type(pay_method))
                print(pay_method)
                pay = Payment()
                if pay_method == 'COD':
                    
                    pay.payment_method = pay_method
                    pay.status = 'pending'
                    
               
                pay.user = user
                pay.save()
                order = Order()
                order.user = user
                order.payment = pay
                order.address_line_1 = request.POST['address']
                order.address_line_2 = request.POST['address1']
                order.first_name = request.POST['fname']
                order.last_name = request.POST['lname']
                order.phone = request.POST['phone']
                order.email = request.POST['email']
                order.country = request.POST['country']
                order.city = request.POST['city']
                order.state = request.POST['state']
                order.zip_code = request.POST['zip']

                yr = int(datetime.date.today().strftime('%Y'))
                dt = int(datetime.date.today().strftime('%d'))
                mt = int(datetime.date.today().strftime('%m'))
                d = datetime.date(yr, mt, dt)
                current_date = d.strftime("%Y%m%d")  # 20210305


                total_amt = Cart_view.objects.filter(uid_id=user_info.id).aggregate(Sum('total_price'))
                order.order_total = total_amt['total_price__sum']
                order.order_number = current_date + str(order.id)
                order.save()
               
                for i in cart:
                    order_prod = OrderProduct()
                    order_prod.order = order
                    order_prod.payment = pay
                    order_prod.user = user

                    order_prod.product = Product.objects.get(id=i.pid.id)
                    order_prod.quantity = i.qty
                    order_prod.product_price = i.pid.price
                    order_prod.save()
                    product = Product.objects.get(id=i.pid_id)
                    product.stock = int(product.stock)-int(order_prod.quantity)
                    product.save()
                
                if pay_method == 'Paypal':
                    cart.delete()
                    return redirect('payment_methods',pay.pk)
                if pay_method == 'rayzorpay':
                    cart.delete()
                    return redirect('payment_method_razor',pay.pk)

                cart.delete()
                return redirect(order_complete)
                
                
            return render(request, 'store_temp/checkout.html', {'cart': cart, 'user': user, 'amt': amt['total_price__sum']})
        else:
            print("nothing in cart")
            return render(request, 'user_temp/cart_page.html', {'message': 'Nothing in cart'})

def address_checkout(request,id):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        address = Address.objects.filter(user=id) 
        if Cart_view.objects.filter(uid_id=id):
            user_info = UserSignUp.objects.get(email=uname)
            cart = Cart_view.objects.filter(uid_id=user_info.id)
            if Cart_view.objects.filter(uid_id=id):

                user = UserSignUp.objects.get(id=id)
                amt = Cart_view.objects.filter(uid_id=id).aggregate(Sum('total_price'))


           
            if request.method == 'POST':
                pay_method = request.POST.get('payment')
                
                pay = Payment()
                if pay_method == 'COD':
                    
                    pay.payment_method = pay_method
                    pay.status = 'pending'
                    
               
                pay.user = user
                pay.save()
                order = Order()
                order.user = user
                order.payment = pay
                address = request.POST.get('address')
                add=int(address)
                address_check = Address.objects.get(id=add)
                order.address_line_1 = address_check.address_line_1
                order.address_line_2 = address_check.address_line_1
                order.first_name = address_check.first_name
                order.last_name = address_check.last_name
                order.phone = address_check.phone
                order.email = address_check.email
                order.country = address_check.country
                order.city = address_check.city
                order.state = address_check.state
                order.zip_code = address_check.zip
                

                yr = int(datetime.date.today().strftime('%Y'))
                dt = int(datetime.date.today().strftime('%d'))
                mt = int(datetime.date.today().strftime('%m'))
                d = datetime.date(yr, mt, dt)
                current_date = d.strftime("%Y%m%d")  # 20210305


                total_amt = Cart_view.objects.filter(uid_id=user_info.id).aggregate(Sum('total_price'))
                order.order_total = total_amt['total_price__sum']
                order.order_number = current_date + str(order.id)
                order.save()
               
                for i in cart:
                    order_prod = OrderProduct()
                    order_prod.order = order
                    order_prod.payment = pay
                    order_prod.user = user

                    order_prod.product = Product.objects.get(id=i.pid.id)
                    order_prod.quantity = i.qty
                    order_prod.product_price = i.pid.price
                    order_prod.save()
                    product = Product.objects.get(id=i.pid_id)
                    product.stock = int(product.stock)-int(order_prod.quantity)
                    product.save()
                
                if pay_method == 'Paypal':
                    
                    return redirect('payment_methods',pay.pk)
                if pay_method == 'rayzorpay':
                    
                    return redirect('payment_method_razor',pay.pk)
                
                
                cart.delete()
                return redirect(order_complete) 
                 
                
            return render(request, 'store_temp/checkout_address.html', {'cart': cart, 'user': user,'address':address, 'amt': amt['total_price__sum']})
        else:
            print("nothing in cart")
            return render(request, 'user_temp/cart_page.html', {'message': 'Nothing in cart'})


def order_view(request):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        user_info = UserSignUp.objects.get(email=uname)
        order = Order.objects.filter(user_id=user_info.id).order_by('-created_at')
        if request.method == 'POST':
            sel = request.POST['select']
            if sel == 'Cancelled':
                order = Order.objects.filter(user_id=user_info.id, status=sel)
        
            elif sel == 'Confirmed':
                order = Order.objects.filter(user_id=user_info.id, status=sel)
            elif sel == 'Shipped':
                order = Order.objects.filter(user_id=user_info.id, status=sel)
            elif sel == 'Out for Delivery':
                order = Order.objects.filter(user_id=user_info.id, status=sel)
            else:
                order = Order.objects.filter(user_id=user_info.id)
           
        p = Paginator(order, 5)
        page_num = request.GET.get('page', 1)
        try:
            page = p.page(page_num)
        except EmptyPage:
            page = p.page(1)   
        return render(request, 'user_temp/profile/orderprofile.html', {'order': page, 'user_info': user_info})

def view_order_detail(request,id):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        user_info = UserSignUp.objects.get(email=uname)
        order_prod = OrderProduct.objects.filter(order_id=id)
        total = 0
        for i in order_prod:
            total += i.quantity*i.product_price
        return render(request,'user_temp/profile/order_view_product.html', {'order_prod':order_prod,'total':total,'user_info': user_info})



def filter_product(request):
    print("helo")
  
    
    return JsonResponse({'data':'helo'})

def filter_prod(request, id,name):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        user = UserSignUp.objects.get(email=uname)
        category = Category.objects.all()
        brand = Product.objects.distinct('product_name')
        prod = Product.objects.all()
        if request.method == "POST":
            search = request.POST['search']
            if len(search) > 0:
                
                if Product.objects.filter(product_name__icontains=search):
                    prod = Product.objects.filter(product_name__icontains=search)
                    p = Paginator(prod, 6)
                    page_num = request.GET.get('page', 1)
                    try:
                        page = p.page(page_num)
                    except EmptyPage:
                        page = p.page(1)
                    context = {
                        'items': page,
                        'user': user,
                        'category': category,
                        'prod':prod,
                        }
                    return render(request, 'store_temp/filter_prod_view.html', context)
                elif Product.objects.filter(series__icontains=search):
                    prod = Product.objects.filter(series__icontains=search)
                    p = Paginator(prod, 6)
                    page_num = request.GET.get('page', 1)
                    try:
                        page = p.page(page_num)
                    except EmptyPage:
                        page = p.page(1)
                    context = {
                        'items': page,
                        'user': user,
                        'category': category,
                        'prod':prod,

                        }
                    
                    return render(request, 'store_temp/filter_prod_view.html', context)
        
        if Product.objects.filter(cid_id=id):
            print("hello",id)
        
            prod = Product.objects.filter(cid_id=id)
            
            p = Paginator(prod, 6)
            page_num = request.GET.get('page', 1)
            try:
                page = p.page(page_num)
            except EmptyPage:
                page = p.page(1)
            context = {
                'items': page,
                'user': user,
                'category': category,
                
            }
        elif Product.objects.filter(product_name=name):
            prod = prod.filter(product_name=name)
            p = Paginator(prod, 6)
            page_num = request.GET.get('page', 1)
            try:
                page = p.page(page_num)
            except EmptyPage:
                page = p.page(1)
            context = {
                'items': page,
                'user': user,
                'category': category,
            }
        else:
             context = {
                'error':'Notihg found!!',
                'user': user,
                'category': category,
            }
        
            
        return render(request, 'store_temp/filter_prod_view.html', context)

def sort_price(request,name):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        user = UserSignUp.objects.get(email=uname)
        category = Category.objects.all()
        brand = Product.objects.distinct('product_name')
        if request.method == "POST":
            search = request.POST['search']
            if len(search) > 0:
                
                if Product.objects.filter(product_name__icontains=search):
                    prod = Product.objects.filter(product_name__icontains=search)
                    p = Paginator(prod, 6)
                    page_num = request.GET.get('page', 1)
                    try:
                        page = p.page(page_num)
                    except EmptyPage:
                        page = p.page(1)
                    context = {
                        'items': page,
                        'user': user,
                        'category': category,
                        'prod':prod,
                        'brand': brand,
                        }
                    return render(request, 'store_temp/filter_prod_view.html', context)
                elif Product.objects.filter(series__icontains=search):
                    prod = Product.objects.filter(series__icontains=search)
                    p = Paginator(prod, 6)
                    page_num = request.GET.get('page', 1)
                    try:
                        page = p.page(page_num)
                    except EmptyPage:
                        page = p.page(1)
                    context = {
                        'items': page,
                        'user': user,
                        'category': category,
                        'prod':prod,
                        'brand': brand,
                        }
                    
                    return render(request, 'store_temp/filter_prod_view.html', context)
        
        if name == 'low_to_high':
            prod = Product.objects.order_by('price')
        else:
            prod = Product.objects.order_by('-price')
        print(prod)
        p = Paginator(prod, 6)
        page_num = request.GET.get('page', 1)
        try:
            page = p.page(page_num)
        except EmptyPage:
            page = p.page(1)
        context = {
            'items': page,
            'user': user,
            'category': category,
                }
        
        return render(request, 'store_temp/filter_prod_view.html', context)


        

def user_index(request):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        user = UserSignUp.objects.get(email=uname)
        cart = Cart_view.objects.filter(uid_id=user.id).count()
        return render(request, 'store_temp/home_page.html', {'user': user,'cart':cart})


def user_order_cancel(request,id):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        user_info = UserSignUp.objects.get(email=uname)
        order_check = Order.objects.get(id=id)
        
        if order_check.status != 'Cancelled':
            order_check.status = 'Cancelled'
            order_prod = OrderProduct.objects.filter(order_id=id)
            for j in order_prod:
            
                
                prod = Product.objects.get(id=j.product_id)
            
                prod.stock = int(prod.stock) + int(j.quantity)
                
                j.status = 'Cancelled'
                j.save()
                prod.save()
                
            order_check.save()
                

        order_product_view = OrderProduct.objects.filter(user_id=user_info.id)
        total=0
        for i in order_product_view:
            total = total+i.quantity*i.product_price

        return redirect(order_view)

def user_product_cancel(request,id):
    if 'uname' in request.session:
        order_prod = OrderProduct.objects.get(id=id)
        
        order_prod.status = 'Cancelled'
        order_prod.save()
    return redirect(order_view)

from django.conf import settings
def payment_method_razor(request,id):
    if 'uname' in request.session:
        print(id)
        uname = request.session.get('uname')
        user = UserSignUp.objects.get(email=uname)
        cart = Cart_view.objects.get(uid=user.id)
        order_prod = OrderProduct.objects.filter(payment_id=id)
        order_check = Order.objects.get(payment_id=id)
        client = razorpay.Client(auth=(settings.KEY,settings.SECRET))
        payment = client.order.create({'amount':order_check.order_total * 100,'currency':'INR','payment_capture':1})
        pay = Payment.objects.get(id=id)
        pay.payment_method = 'razorpay'
        pay.status = payment['status']
        pay.payment_id = payment['id']
        pay.user = user
        pay.amount_paid = payment['amount']
        pay.save()
        cart.delete()

        print(payment)
    return render(request,'store_temp/payment_razor.html',{'order_prod':order_prod,'order':order_check,'payment':payment})

def payment_methods(request,id):
    print(id)
    if 'uname' in request.session:
        order_prod = OrderProduct.objects.filter(payment_id=id)
        order = Order.objects.get(payment_id=id)
        context = {
        'order_prod':order_prod,'order':order
        }
       

    return render(request,'store_temp/payment.html')

from django.http import JsonResponse


def payment_confirm(request,id):
    if 'uname' in request.session:
        print(id)
        uname = request.session.get('uname')
        user = UserSignUp.objects.get(email=uname)
        
        order = Order.objects.get(payment_id=id)
        body = json.loads(request.body)
        cart = Cart_view.objects.get(uid=user.id)
        print("hello",body)
        print(body['transId'])
        pay = Payment.objects.get(id=id)
        pay.payment_id = body['transId']
        pay.payment_method = 'Paypal'
        pay.status = body['status']
        pay.amount_paid = order.order_total
        pay.user = user
        pay.save()
        cart.delete()

        data={
            'transId': pay.payment_id,
        }
        return JsonResponse(data)

def payment_complete(request):

     return render(request,'user_temp/payment_complete.html',{'message': 'Payment Successful!!'})
     
def order_complete(request):

     return render(request,'user_temp/payment_complete.html',{'message': 'Ordered Successful!!'})

###################################################################################
import io
from xhtml2pdf import pisa
from django.template.loader import get_template
from django.template import Context
from django.http import HttpResponse


def render_to_pdf(template_src, context_dict):
    template = get_template(template_src)
    html  = template.render(context_dict)
    result = io.BytesIO()
    pdf = pisa.pisaDocument(io.BytesIO(html.encode("ISO-8859-1")), result)
    if not pdf.err:
        return HttpResponse(result.getvalue(), content_type='application/pdf')
    return

def download(request,id):
    v=OrderProduct.objects.get(id=id)
    mydict={
        
        'customerName':v.order.first_name,
        'customerEmail':v.user.email,
        'customerMobile':v.user.number,
        'shipmentAddress':v.order.address_line_1,
        'orderStatus':v.status,
        'productimage':v.product.image,
         'productQuantity':v.quantity,
        'productName':v.product.cid.cate_name,
         'productseries':v.product.series,
        'productPrice':v.product.price,
        'productDescription':v.product.descrip,


    }
    return render_to_pdf('store_temp/download.html',mydict)
##################################################################################

def add_address(request):
    if 'uname' in request.session:
        if request.method == 'POST':
            uname = request.session.get('uname')
            user = UserSignUp.objects.get(email=uname)

            address = Address()
            address.user = user
            address.first_name = request.POST.get('fname')
            address.last_name = request.POST.get('lname')
            address.country = request.POST.get('country')
            address.address_line_1 = request.POST.get('address')
            address.address_line_2 = request.POST.get('address1')
            address.city = request.POST.get('city')
            address.state = request.POST.get('state')
            address.phone = request.POST.get('phone')
            address.zip = request.POST.get('zip')
            address.email = request.POST.get('email')
            address.save()
            return redirect(view_address)

    return render(request,'user_temp/profile/address.html')

def view_address(request):
    if 'uname' in request.session:
        uname = request.session.get('uname')
        user = UserSignUp.objects.get(email=uname)
        address =Address.objects.filter(user=user.id)
        context = {
            'user_info': user,
            'address': address,
        }
    return render(request,'user_temp/profile/view_address.html',context)

def address_chose(request):
    uname = request.session.get('uname')
    user = UserSignUp.objects.get(email=uname)
    address = Address.objects.filter(id=user.id)
    for i in address:
        print(i.first_name)
    context = {
        'address': address,
    }
    return render(request,'store_temp/modal.html',context)